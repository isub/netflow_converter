#include "../ipfix_dictionary.h"

#include "../../../nfc_dict.h"
#include "ipfix_dict_iana.h"

using namespace ipfix;

int ipfix_dict_iana_init()
{
  CHECK_DICT( ipfix_dictionary_add( "0", 0, "Reserved", undefinedDataType, undefinedDataSemantic, undefinedStatus, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "1", 0, "octetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "2", 0, "packetDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "3", 0, "deltaFlowCount", unsigned64, deltaCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "4", 0, "protocolIdentifier", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "5", 0, "ipClassOfService", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "6", 0, "tcpControlBits", unsigned16, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "7", 0, "sourceTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "8", 0, "sourceIPv4Address", ipv4Address, defaultDataSemantic, current, "The IPv4 source address in the IP packet header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "9", 0, "sourceIPv4PrefixLength", unsigned8, undefinedDataSemantic, current, "", bits, "0-32" ) );
  CHECK_DICT( ipfix_dictionary_add( "10", 0, "ingressInterface", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "11", 0, "destinationTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "12", 0, "destinationIPv4Address", ipv4Address, defaultDataSemantic, current, "The IPv4 destination address in the IP packet header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "13", 0, "destinationIPv4PrefixLength", unsigned8, undefinedDataSemantic, current, "", bits, "0-32" ) );
  CHECK_DICT( ipfix_dictionary_add( "14", 0, "egressInterface", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "15", 0, "ipNextHopIPv4Address", ipv4Address, defaultDataSemantic, current, "The IPv4 address of the next IPv4 hop.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "16", 0, "bgpSourceAsNumber", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "17", 0, "bgpDestinationAsNumber", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "18", 0, "bgpNextHopIPv4Address", ipv4Address, defaultDataSemantic, current, "The IPv4 address of the next (adjacent) BGP hop.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "19", 0, "postMCastPacketDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "20", 0, "postMCastOctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "21", 0, "flowEndSysUpTime", unsigned32, undefinedDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "22", 0, "flowStartSysUpTime", unsigned32, undefinedDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "23", 0, "postOctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "24", 0, "postPacketDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "25", 0, "minimumIpTotalLength", unsigned64, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "26", 0, "maximumIpTotalLength", unsigned64, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "27", 0, "sourceIPv6Address", ipv6Address, defaultDataSemantic, current, "The IPv6 source address in the IP packet header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "28", 0, "destinationIPv6Address", ipv6Address, defaultDataSemantic, current, "The IPv6 destination address in the IP packet header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "29", 0, "sourceIPv6PrefixLength", unsigned8, undefinedDataSemantic, current, "", bits, "0-128" ) );
  CHECK_DICT( ipfix_dictionary_add( "30", 0, "destinationIPv6PrefixLength", unsigned8, undefinedDataSemantic, current, "", bits, "0-128" ) );
  CHECK_DICT( ipfix_dictionary_add( "31", 0, "flowLabelIPv6", unsigned32, identifier, current, "The value of the IPv6 Flow Label field in the IP packet header.", undefinedUnit, "0-0xFFFFF" ) );
  CHECK_DICT( ipfix_dictionary_add( "32", 0, "icmpTypeCodeIPv4", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "33", 0, "igmpType", unsigned8, identifier, current, "The type field of the IGMP message.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "34", 0, "samplingInterval", unsigned32, quantity, deprecated, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "35", 0, "samplingAlgorithm", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "36", 0, "flowActiveTimeout", unsigned16, undefinedDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "37", 0, "flowIdleTimeout", unsigned16, undefinedDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "38", 0, "engineType", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "39", 0, "engineId", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "40", 0, "exportedOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "41", 0, "exportedMessageTotalCount", unsigned64, totalCounter, current, "", messages, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "42", 0, "exportedFlowRecordTotalCount", unsigned64, totalCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "43", 0, "ipv4RouterSc", ipv4Address, defaultDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "44", 0, "sourceIPv4Prefix", ipv4Address, defaultDataSemantic, current, "IPv4 source address prefix.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "45", 0, "destinationIPv4Prefix", ipv4Address, defaultDataSemantic, current, "IPv4 destination address prefix.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "46", 0, "mplsTopLabelType", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "47", 0, "mplsTopLabelIPv4Address", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "48", 0, "samplerId", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "49", 0, "samplerMode", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "50", 0, "samplerRandomInterval", unsigned32, quantity, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "51", 0, "classId", unsigned8, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "52", 0, "minimumTTL", unsigned8, undefinedDataSemantic, current, "Minimum TTL value observed for any packet in this Flow.", hops, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "53", 0, "maximumTTL", unsigned8, undefinedDataSemantic, current, "Maximum TTL value observed for any packet in this Flow.", hops, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "54", 0, "fragmentIdentification", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "55", 0, "postIpClassOfService", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "56", 0, "sourceMacAddress", macAddress, defaultDataSemantic, current, "The IEEE 802 source MAC address field.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "57", 0, "postDestinationMacAddress", macAddress, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "58", 0, "vlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "59", 0, "postVlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "60", 0, "ipVersion", unsigned8, identifier, current, "The IP version field in the IP packet header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "61", 0, "flowDirection", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "62", 0, "ipNextHopIPv6Address", ipv6Address, defaultDataSemantic, current, "The IPv6 address of the next IPv6 hop.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "63", 0, "bgpNextHopIPv6Address", ipv6Address, defaultDataSemantic, current, "The IPv6 address of the next (adjacent) BGP hop.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "64", 0, "ipv6ExtensionHeaders", unsigned32, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "65-69", 0, "Assigned for NetFlow v9 compatibility", undefinedDataType, undefinedDataSemantic, undefinedStatus, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "70", 0, "mplsTopLabelStackSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "71", 0, "mplsLabelStackSection2", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "72", 0, "mplsLabelStackSection3", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "73", 0, "mplsLabelStackSection4", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "74", 0, "mplsLabelStackSection5", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "75", 0, "mplsLabelStackSection6", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "76", 0, "mplsLabelStackSection7", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "77", 0, "mplsLabelStackSection8", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "78", 0, "mplsLabelStackSection9", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "79", 0, "mplsLabelStackSection10", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "80", 0, "destinationMacAddress", macAddress, defaultDataSemantic, current, "The IEEE 802 destination MAC address field.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "81", 0, "postSourceMacAddress", macAddress, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "82", 0, "interfaceName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "83", 0, "interfaceDescription", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "84", 0, "samplerName", string, undefinedDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "85", 0, "octetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "86", 0, "packetTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "87", 0, "flagsAndSamplerId", unsigned32, identifier, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "88", 0, "fragmentOffset", unsigned16, quantity, current, "", undefinedUnit, "0-0x1FFF" ) );
  CHECK_DICT( ipfix_dictionary_add( "89", 0, "forwardingStatus", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "90", 0, "mplsVpnRouteDistinguisher", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "91", 0, "mplsTopLabelPrefixLength", unsigned8, quantity, current, "", bits, "0-32" ) );
  CHECK_DICT( ipfix_dictionary_add( "92", 0, "srcTrafficIndex", unsigned32, identifier, current, "BGP Policy Accounting Source Traffic Index.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "93", 0, "dstTrafficIndex", unsigned32, identifier, current, "BGP Policy Accounting Destination Traffic Index.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "94", 0, "applicationDescription", string, defaultDataSemantic, current, "Specifies the description of an application.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "95", 0, "applicationId", octetArray, defaultDataSemantic, current, "Specifies an Application ID per [RFC6759].", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "96", 0, "applicationName", string, defaultDataSemantic, current, "Specifies the name of an application.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "97", 0, "Assigned for NetFlow v9 compatibility", undefinedDataType, undefinedDataSemantic, undefinedStatus, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "98", 0, "postIpDiffServCodePoint", unsigned8, identifier, current, "", undefinedUnit, "0-63" ) );
  CHECK_DICT( ipfix_dictionary_add( "99", 0, "multicastReplicationFactor", unsigned32, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "100", 0, "className", string, undefinedDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "101", 0, "classificationEngineId", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "102", 0, "layer2packetSectionOffset", unsigned16, quantity, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "103", 0, "layer2packetSectionSize", unsigned16, quantity, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "104", 0, "layer2packetSectionData", octetArray, undefinedDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "105-127", 0, "Assigned for NetFlow v9 compatibility", undefinedDataType, undefinedDataSemantic, undefinedStatus, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "128", 0, "bgpNextAdjacentAsNumber", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "129", 0, "bgpPrevAdjacentAsNumber", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "130", 0, "exporterIPv4Address", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "131", 0, "exporterIPv6Address", ipv6Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "132", 0, "droppedOctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "133", 0, "droppedPacketDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "134", 0, "droppedOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "135", 0, "droppedPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "136", 0, "flowEndReason", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "137", 0, "commonPropertiesId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "138", 0, "observationPointId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "139", 0, "icmpTypeCodeIPv6", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "140", 0, "mplsTopLabelIPv6Address", ipv6Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "141", 0, "lineCardId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "142", 0, "portId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "143", 0, "meteringProcessId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "144", 0, "exportingProcessId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "145", 0, "templateId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "146", 0, "wlanChannelId", unsigned8, identifier, current, "The identifier of the 802.11 (Wi-Fi) channel used.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "147", 0, "wlanSSID", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "148", 0, "flowId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "149", 0, "observationDomainId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "150", 0, "flowStartSeconds", dateTimeSeconds, defaultDataSemantic, current, "The absolute timestamp of the first packet of this Flow.", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "151", 0, "flowEndSeconds", dateTimeSeconds, defaultDataSemantic, current, "The absolute timestamp of the last packet of this Flow.", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "152", 0, "flowStartMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "The absolute timestamp of the first packet of this Flow.", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "153", 0, "flowEndMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "The absolute timestamp of the last packet of this Flow.", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "154", 0, "flowStartMicroseconds", dateTimeMicroseconds, defaultDataSemantic, current, "The absolute timestamp of the first packet of this Flow.", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "155", 0, "flowEndMicroseconds", dateTimeMicroseconds, defaultDataSemantic, current, "The absolute timestamp of the last packet of this Flow.", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "156", 0, "flowStartNanoseconds", dateTimeNanoseconds, defaultDataSemantic, current, "The absolute timestamp of the first packet of this Flow.", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "157", 0, "flowEndNanoseconds", dateTimeNanoseconds, defaultDataSemantic, current, "The absolute timestamp of the last packet of this Flow.", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "158", 0, "flowStartDeltaMicroseconds", unsigned32, undefinedDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "159", 0, "flowEndDeltaMicroseconds", unsigned32, undefinedDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "160", 0, "systemInitTimeMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "161", 0, "flowDurationMilliseconds", unsigned32, undefinedDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "162", 0, "flowDurationMicroseconds", unsigned32, undefinedDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "163", 0, "observedFlowTotalCount", unsigned64, totalCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "164", 0, "ignoredPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "165", 0, "ignoredOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "166", 0, "notSentFlowTotalCount", unsigned64, totalCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "167", 0, "notSentPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "168", 0, "notSentOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "169", 0, "destinationIPv6Prefix", ipv6Address, defaultDataSemantic, current, "IPv6 destination address prefix.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "170", 0, "sourceIPv6Prefix", ipv6Address, defaultDataSemantic, current, "IPv6 source address prefix.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "171", 0, "postOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "172", 0, "postPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "173", 0, "flowKeyIndicator", unsigned64, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "174", 0, "postMCastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "175", 0, "postMCastOctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "176", 0, "icmpTypeIPv4", unsigned8, identifier, current, "Type of the IPv4 ICMP message.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "177", 0, "icmpCodeIPv4", unsigned8, identifier, current, "Code of the IPv4 ICMP message.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "178", 0, "icmpTypeIPv6", unsigned8, identifier, current, "Type of the IPv6 ICMP message.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "179", 0, "icmpCodeIPv6", unsigned8, identifier, current, "Code of the IPv6 ICMP message.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "180", 0, "udpSourcePort", unsigned16, identifier, current, "The source port identifier in the UDP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "181", 0, "udpDestinationPort", unsigned16, identifier, current, "The destination port identifier in the UDP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "182", 0, "tcpSourcePort", unsigned16, identifier, current, "The source port identifier in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "183", 0, "tcpDestinationPort", unsigned16, identifier, current, "The destination port identifier in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "184", 0, "tcpSequenceNumber", unsigned32, undefinedDataSemantic, current, "The sequence number in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "185", 0, "tcpAcknowledgementNumber", unsigned32, undefinedDataSemantic, current, "The acknowledgement number in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "186", 0, "tcpWindowSize", unsigned16, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "187", 0, "tcpUrgentPointer", unsigned16, undefinedDataSemantic, current, "The urgent pointer in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "188", 0, "tcpHeaderLength", unsigned8, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "189", 0, "ipHeaderLength", unsigned8, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "190", 0, "totalLengthIPv4", unsigned16, undefinedDataSemantic, current, "The total length of the IPv4 packet.", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "191", 0, "payloadLengthIPv6", unsigned16, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "192", 0, "ipTTL", unsigned8, undefinedDataSemantic, current, "", hops, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "193", 0, "nextHeaderIPv6", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "194", 0, "mplsPayloadLength", unsigned32, undefinedDataSemantic, current, "The size of the MPLS packet without the label stack.", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "195", 0, "ipDiffServCodePoint", unsigned8, identifier, current, "", undefinedUnit, "0-63" ) );
  CHECK_DICT( ipfix_dictionary_add( "196", 0, "ipPrecedence", unsigned8, identifier, current, "", undefinedUnit, "0-7" ) );
  CHECK_DICT( ipfix_dictionary_add( "197", 0, "fragmentFlags", unsigned8, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "198", 0, "octetDeltaSumOfSquares", unsigned64, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "199", 0, "octetTotalSumOfSquares", unsigned64, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "200", 0, "mplsTopLabelTTL", unsigned8, undefinedDataSemantic, current, "", hops, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "201", 0, "mplsLabelStackLength", unsigned32, undefinedDataSemantic, current, "The length of the MPLS label stack in units of octets.", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "202", 0, "mplsLabelStackDepth", unsigned32, undefinedDataSemantic, current, "The number of labels in the MPLS label stack.", entries, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "203", 0, "mplsTopLabelExp", unsigned8, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "204", 0, "ipPayloadLength", unsigned32, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "205", 0, "udpMessageLength", unsigned16, undefinedDataSemantic, current, "The value of the Length field in the UDP header.", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "206", 0, "isMulticast", unsigned8, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "207", 0, "ipv4IHL", unsigned8, undefinedDataSemantic, current, "", fouroctetwords, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "208", 0, "ipv4Options", unsigned32, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "209", 0, "tcpOptions", unsigned64, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "210", 0, "paddingOctets", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "211", 0, "collectorIPv4Address", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "212", 0, "collectorIPv6Address", ipv6Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "213", 0, "exportInterface", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "214", 0, "exportProtocolVersion", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "215", 0, "exportTransportProtocol", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "216", 0, "collectorTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "217", 0, "exporterTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "218", 0, "tcpSynTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "219", 0, "tcpFinTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "220", 0, "tcpRstTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "221", 0, "tcpPshTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "222", 0, "tcpAckTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "223", 0, "tcpUrgTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "224", 0, "ipTotalLength", unsigned64, undefinedDataSemantic, current, "The total length of the IP packet.", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "225", 0, "postNATSourceIPv4Address", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "226", 0, "postNATDestinationIPv4Address", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "227", 0, "postNAPTSourceTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "228", 0, "postNAPTDestinationTransportPort", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "229", 0, "natOriginatingAddressRealm", unsigned8, identifier, current, "", undefinedUnit, "1-2" ) );
  CHECK_DICT( ipfix_dictionary_add( "230", 0, "natEvent", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "231", 0, "initiatorOctets", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "232", 0, "responderOctets", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "233", 0, "firewallEvent", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "234", 0, "ingressVRFID", unsigned32, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "235", 0, "egressVRFID", unsigned32, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "236", 0, "VRFname", string, defaultDataSemantic, current, "The name of a VPN Routing and Forwarding table (VRF).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "237", 0, "postMplsTopLabelExp", unsigned8, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "238", 0, "tcpWindowScale", unsigned16, undefinedDataSemantic, current, "The scale of the window field in the TCP header.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "239", 0, "biflowDirection", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "240", 0, "ethernetHeaderLength", unsigned8, quantity, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "241", 0, "ethernetPayloadLength", unsigned16, quantity, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "242", 0, "ethernetTotalLength", unsigned16, quantity, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "243", 0, "dot1qVlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "244", 0, "dot1qPriority", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "245", 0, "dot1qCustomerVlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "246", 0, "dot1qCustomerPriority", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "247", 0, "metroEvcId", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "248", 0, "metroEvcType", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "249", 0, "pseudoWireId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "250", 0, "pseudoWireType", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "251", 0, "pseudoWireControlWord", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "252", 0, "ingressPhysicalInterface", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "253", 0, "egressPhysicalInterface", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "254", 0, "postDot1qVlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "255", 0, "postDot1qCustomerVlanId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "256", 0, "ethernetType", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "257", 0, "postIpPrecedence", unsigned8, identifier, current, "", undefinedUnit, "0-7" ) );
  CHECK_DICT( ipfix_dictionary_add( "258", 0, "collectionTimeMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "259", 0, "exportSctpStreamId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "260", 0, "maxExportSeconds", dateTimeSeconds, defaultDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "261", 0, "maxFlowEndSeconds", dateTimeSeconds, defaultDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "262", 0, "messageMD5Checksum", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "263", 0, "messageScope", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "0-0" ) );
  CHECK_DICT( ipfix_dictionary_add( "264", 0, "minExportSeconds", dateTimeSeconds, defaultDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "265", 0, "minFlowStartSeconds", dateTimeSeconds, defaultDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "266", 0, "opaqueOctets", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "267", 0, "sessionScope", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "0-0" ) );
  CHECK_DICT( ipfix_dictionary_add( "268", 0, "maxFlowEndMicroseconds", dateTimeMicroseconds, defaultDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "269", 0, "maxFlowEndMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "270", 0, "maxFlowEndNanoseconds", dateTimeNanoseconds, defaultDataSemantic, current, "", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "271", 0, "minFlowStartMicroseconds", dateTimeMicroseconds, defaultDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "272", 0, "minFlowStartMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "273", 0, "minFlowStartNanoseconds", dateTimeNanoseconds, defaultDataSemantic, current, "", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "274", 0, "collectorCertificate", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "275", 0, "exporterCertificate", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "276", 0, "dataRecordsReliability", boolean, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "277", 0, "observationPointType", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "278", 0, "newConnectionDeltaCount", unsigned32, deltaCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "279", 0, "connectionSumDurationSeconds", unsigned64, undefinedDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "280", 0, "connectionTransactionId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "281", 0, "postNATSourceIPv6Address", ipv6Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "282", 0, "postNATDestinationIPv6Address", ipv6Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "283", 0, "natPoolId", unsigned32, identifier, current, "Locally unique identifier of a NAT pool.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "284", 0, "natPoolName", string, defaultDataSemantic, current, "The name of a NAT pool identified by a natPoolID.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "285", 0, "anonymizationFlags", unsigned16, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "286", 0, "anonymizationTechnique", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "287", 0, "informationElementIndex", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "288", 0, "p2pTechnology", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "289", 0, "tunnelTechnology", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "290", 0, "encryptedTechnology", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "291", 0, "basicList", basicList, list, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "292", 0, "subTemplateList", subTemplateList, list, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "293", 0, "subTemplateMultiList", subTemplateMultiList, list, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "294", 0, "bgpValidityState", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "295", 0, "IPSecSPI", unsigned32, identifier, current, "IPSec Security Parameters Index (SPI).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "296", 0, "greKey", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "297", 0, "natType", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "298", 0, "initiatorPackets", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "299", 0, "responderPackets", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "300", 0, "observationDomainName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "301", 0, "selectionSequenceId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "302", 0, "selectorId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "303", 0, "informationElementId", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "304", 0, "selectorAlgorithm", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "305", 0, "samplingPacketInterval", unsigned32, quantity, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "306", 0, "samplingPacketSpace", unsigned32, quantity, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "307", 0, "samplingTimeInterval", unsigned32, quantity, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "308", 0, "samplingTimeSpace", unsigned32, quantity, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "309", 0, "samplingSize", unsigned32, quantity, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "310", 0, "samplingPopulation", unsigned32, quantity, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "311", 0, "samplingProbability", float64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "312", 0, "dataLinkFrameSize", unsigned16, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "313", 0, "ipHeaderPacketSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "314", 0, "ipPayloadPacketSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "315", 0, "dataLinkFrameSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "316", 0, "mplsLabelStackSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "317", 0, "mplsPayloadPacketSection", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "318", 0, "selectorIdTotalPktsObserved", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "319", 0, "selectorIdTotalPktsSelected", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "320", 0, "absoluteError", float64, quantity, current, "", inferred, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "321", 0, "relativeError", float64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "322", 0, "observationTimeSeconds", dateTimeSeconds, defaultDataSemantic, current, "", seconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "323", 0, "observationTimeMilliseconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "324", 0, "observationTimeMicroseconds", dateTimeMicroseconds, defaultDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "325", 0, "observationTimeNanoseconds", dateTimeNanoseconds, defaultDataSemantic, current, "", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "326", 0, "digestHashValue", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "327", 0, "hashIPPayloadOffset", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "328", 0, "hashIPPayloadSize", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "329", 0, "hashOutputRangeMin", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "330", 0, "hashOutputRangeMax", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "331", 0, "hashSelectedRangeMin", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "332", 0, "hashSelectedRangeMax", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "333", 0, "hashDigestOutput", boolean, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "334", 0, "hashInitialiserValue", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "335", 0, "selectorName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "336", 0, "upperCILimit", float64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "337", 0, "lowerCILimit", float64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "338", 0, "confidenceLevel", float64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "339", 0, "informationElementDataType", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "340", 0, "informationElementDescription", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "341", 0, "informationElementName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "342", 0, "informationElementRangeBegin", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "343", 0, "informationElementRangeEnd", unsigned64, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "344", 0, "informationElementSemantics", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "345", 0, "informationElementUnits", unsigned16, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "346", 0, "privateEnterpriseNumber", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "347", 0, "virtualStationInterfaceId", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "348", 0, "virtualStationInterfaceName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "349", 0, "virtualStationUUID", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "350", 0, "virtualStationName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "351", 0, "layer2SegmentId", unsigned64, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "352", 0, "layer2OctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "353", 0, "layer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "354", 0, "ingressUnicastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "355", 0, "ingressMulticastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "356", 0, "ingressBroadcastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "357", 0, "egressUnicastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "358", 0, "egressBroadcastPacketTotalCount", unsigned64, totalCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "359", 0, "monitoringIntervalStartMilliSeconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "360", 0, "monitoringIntervalEndMilliSeconds", dateTimeMilliseconds, defaultDataSemantic, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "361", 0, "portRangeStart", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "362", 0, "portRangeEnd", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "363", 0, "portRangeStepSize", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "364", 0, "portRangeNumPorts", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "365", 0, "staMacAddress", macAddress, defaultDataSemantic, current, "The IEEE 802 MAC address of a wireless station (STA).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "366", 0, "staIPv4Address", ipv4Address, defaultDataSemantic, current, "The IPv4 address of a wireless station (STA).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "367", 0, "wtpMacAddress", macAddress, defaultDataSemantic, current, "The IEEE 802 MAC address of a wireless access point (WTP).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "368", 0, "ingressInterfaceType", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "369", 0, "egressInterfaceType", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "370", 0, "rtpSequenceNumber", unsigned16, undefinedDataSemantic, current, "The RTP sequence number per [RFC3550].", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "371", 0, "userName", string, defaultDataSemantic, current, "User name associated with the flow.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "372", 0, "applicationCategoryName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "373", 0, "applicationSubCategoryName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "374", 0, "applicationGroupName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "375", 0, "originalFlowsPresent", unsigned64, deltaCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "376", 0, "originalFlowsInitiated", unsigned64, deltaCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "377", 0, "originalFlowsCompleted", unsigned64, deltaCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "378", 0, "distinctCountOfSourceIPAddress", unsigned64, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "379", 0, "distinctCountOfDestinationIPAddress", unsigned64, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "380", 0, "distinctCountOfSourceIPv4Address", unsigned32, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "381", 0, "distinctCountOfDestinationIPv4Address", unsigned32, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "382", 0, "distinctCountOfSourceIPv6Address", unsigned64, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "383", 0, "distinctCountOfDestinationIPv6Address", unsigned64, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "384", 0, "valueDistributionMethod", unsigned8, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "385", 0, "rfc3550JitterMilliseconds", unsigned32, quantity, current, "", milliseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "386", 0, "rfc3550JitterMicroseconds", unsigned32, quantity, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "387", 0, "rfc3550JitterNanoseconds", unsigned32, quantity, current, "", nanoseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "388", 0, "dot1qDEI", boolean, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "389", 0, "dot1qCustomerDEI", boolean, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "390", 0, "flowSelectorAlgorithm", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "391", 0, "flowSelectedOctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "392", 0, "flowSelectedPacketDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "393", 0, "flowSelectedFlowDeltaCount", unsigned64, deltaCounter, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "394", 0, "selectorIDTotalFlowsObserved", unsigned64, undefinedDataSemantic, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "395", 0, "selectorIDTotalFlowsSelected", unsigned64, undefinedDataSemantic, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "396", 0, "samplingFlowInterval", unsigned64, undefinedDataSemantic, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "397", 0, "samplingFlowSpacing", unsigned64, undefinedDataSemantic, current, "", flows, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "398", 0, "flowSamplingTimeInterval", unsigned64, undefinedDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "399", 0, "flowSamplingTimeSpacing", unsigned64, undefinedDataSemantic, current, "", microseconds, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "400", 0, "hashFlowDomain", unsigned16, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "401", 0, "transportOctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "402", 0, "transportPacketDeltaCount", unsigned64, deltaCounter, current, "", packets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "403", 0, "originalExporterIPv4Address", ipv4Address, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "404", 0, "originalExporterIPv6Address", ipv6Address, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "405", 0, "originalObservationDomainId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "406", 0, "intermediateProcessId", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "407", 0, "ignoredDataRecordTotalCount", unsigned64, totalCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "408", 0, "dataLinkFrameType", unsigned16, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "409", 0, "sectionOffset", unsigned16, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "410", 0, "sectionExportedOctets", unsigned16, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "411", 0, "dot1qServiceInstanceTag", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "412", 0, "dot1qServiceInstanceId", unsigned32, identifier, current, "", undefinedUnit, "0-0xFFFFFF" ) );
  CHECK_DICT( ipfix_dictionary_add( "413", 0, "dot1qServiceInstancePriority", unsigned8, identifier, current, "", undefinedUnit, "0-7" ) );
  CHECK_DICT( ipfix_dictionary_add( "414", 0, "dot1qCustomerSourceMacAddress", macAddress, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "415", 0, "dot1qCustomerDestinationMacAddress", macAddress, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "416", 0, "", undefinedDataType, undefinedDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "417", 0, "postLayer2OctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "418", 0, "postMCastLayer2OctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "419", 0, "", undefinedDataType, undefinedDataSemantic, deprecated, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "420", 0, "postLayer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "421", 0, "postMCastLayer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "422", 0, "minimumLayer2TotalLength", unsigned64, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "423", 0, "maximumLayer2TotalLength", unsigned64, undefinedDataSemantic, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "424", 0, "droppedLayer2OctetDeltaCount", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "425", 0, "droppedLayer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "426", 0, "ignoredLayer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "427", 0, "notSentLayer2OctetTotalCount", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "428", 0, "layer2OctetDeltaSumOfSquares", unsigned64, deltaCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "429", 0, "layer2OctetTotalSumOfSquares", unsigned64, totalCounter, current, "", octets, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "430", 0, "layer2FrameDeltaCount", unsigned64, deltaCounter, current, "", frames, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "431", 0, "layer2FrameTotalCount", unsigned64, totalCounter, current, "", frames, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "432", 0, "pseudoWireDestinationIPv4Address", ipv4Address, defaultDataSemantic, current, "The destination IPv4 address of the PSN tunnel carrying the pseudowire.", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "433", 0, "ignoredLayer2FrameTotalCount", unsigned64, totalCounter, current, "", frames, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "434", 0, "mibObjectValueInteger", signed32, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "435", 0, "mibObjectValueOctetString", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "436", 0, "mibObjectValueOID", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "437", 0, "mibObjectValueBits", octetArray, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "438", 0, "mibObjectValueIPAddress", ipv4Address, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "439", 0, "mibObjectValueCounter", unsigned64, snmpCounter, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "440", 0, "mibObjectValueGauge", unsigned32, snmpGauge, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "441", 0, "mibObjectValueTimeTicks", unsigned32, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "442", 0, "mibObjectValueUnsigned", unsigned32, quantity, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "443", 0, "mibObjectValueTable", subTemplateList, list, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "444", 0, "mibObjectValueRow", subTemplateList, list, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "445", 0, "mibObjectIdentifier", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "446", 0, "mibSubIdentifier", unsigned32, identifier, current, "A non-negative sub-identifier of an Object Identifier (OID).", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "447", 0, "mibIndexIndicator", unsigned64, flags, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "448", 0, "mibCaptureTimeSemantics", unsigned8, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "449", 0, "mibContextEngineID", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "450", 0, "mibContextName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "451", 0, "mibObjectName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "452", 0, "mibObjectDescription", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "453", 0, "mibObjectSyntax", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "454", 0, "mibModuleName", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "455", 0, "mobileIMSI", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "456", 0, "mobileMSISDN", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "457", 0, "httpStatusCode", unsigned16, identifier, current, "", undefinedUnit, "0-999" ) );
  CHECK_DICT( ipfix_dictionary_add( "458", 0, "sourceTransportPortsLimit", unsigned16, quantity, current, "", ports, "1-65535" ) );
  CHECK_DICT( ipfix_dictionary_add( "459", 0, "httpRequestMethod", string, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "460", 0, "httpRequestHost", string, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "461", 0, "httpRequestTarget", string, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "462", 0, "httpMessageVersion", string, undefinedDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "463", 0, "natInstanceID", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "464", 0, "internalAddressRealm", octetArray, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "465", 0, "externalAddressRealm", octetArray, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "466", 0, "natQuotaExceededEvent", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "467", 0, "natThresholdEvent", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "468", 0, "httpUserAgent", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "469", 0, "httpContentType", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "470", 0, "httpReasonPhrase", string, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "471", 0, "maxSessionEntries", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "472", 0, "maxBIBEntries", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "473", 0, "maxEntriesPerUser", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "474", 0, "maxSubscribers", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "475", 0, "maxFragmentsPendingReassembly", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "476", 0, "addressPoolHighThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "477", 0, "addressPoolLowThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "478", 0, "addressPortMappingHighThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "479", 0, "addressPortMappingLowThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "480", 0, "addressPortMappingPerUserHighThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "481", 0, "globalAddressMappingHighThreshold", unsigned32, identifier, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "482", 0, "vpnIdentifier", octetArray, defaultDataSemantic, current, "", undefinedUnit, "" ) );
  CHECK_DICT( ipfix_dictionary_add( "483-32767", 0, "Unassigned", undefinedDataType, undefinedDataSemantic, undefinedStatus, "", undefinedUnit, "" ) );

  return 0;
}
